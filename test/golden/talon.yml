input:
  name: talon
  class_prefix: Talon
output: |-
  from_tree_sitter(self, tsnode: tree_sitter.Node, encoding: str = 'utf-8') -> list[tree_sitter_type_provider.node_types.Node] | tree_sitter_type_provider.node_types.Node | None
  ERROR(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[list[tree_sitter_type_provider.node_types.Node] | tree_sitter_type_provider.node_types.Node | None] = <factory>) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  NodeTransformer()
    transform(self, node: tree_sitter_type_provider.node_types.Node) -> ~Result
    transform_ERROR(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonAction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonAnd(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonArgumentList(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonAssignment(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonBinaryOperator(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonBlock(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonCapture(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonChoice(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonCommand(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonComment(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonContext(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonDocstring(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonEndAnchor(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonFloat(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonImplicitString(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonIncludeTag(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonInteger(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonInterpolation(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonKeyAction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonList(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonMatch(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonNot(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonNumber(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonOperator(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonOptional(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonOr(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonParenthesizedExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonParenthesizedRule(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonRegexEscapeSequence(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonRepeat(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonRepeat1(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonRule(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonSeq(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonSettings(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonSleepAction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonSourceFile(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonStartAnchor(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonString(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonStringContent(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonStringEscapeSequence(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonVariable(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_TalonWord(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
  NodeVisitor()
    generic_visit(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_ERROR(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonAction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonAnd(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonArgumentList(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonAssignment(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonBinaryOperator(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonBlock(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonCapture(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonChoice(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonCommand(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonComment(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonContext(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonDocstring(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonEndAnchor(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonFloat(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonImplicitString(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonIncludeTag(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonInteger(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonInterpolation(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonKeyAction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonList(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonMatch(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonNot(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonNumber(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonOperator(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonOptional(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonOr(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonParenthesizedExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonParenthesizedRule(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonRegexEscapeSequence(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonRepeat(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonRepeat1(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonRule(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonSeq(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonSettings(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonSleepAction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonSourceFile(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonStartAnchor(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonString(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonStringContent(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonStringEscapeSequence(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonVariable(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_TalonWord(self, node: tree_sitter_type_provider.node_types.Node) -> None
  TalonAction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, action_name: 'TalonIdentifier', arguments: 'TalonArgumentList') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonAnd(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonAnd'), ForwardRef('TalonMatch'), ForwardRef('TalonNot')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonArgumentList(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonAssignment(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: 'TalonIdentifier', right: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonBinaryOperator(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')], operator: 'TalonOperator', right: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonBlock(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonAssignment'), ForwardRef('TalonDocstring'), ForwardRef('TalonExpression')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonCapture(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, capture_name: 'TalonIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonChoice(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCapture'), ForwardRef('TalonEndAnchor'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonSeq'), ForwardRef('TalonStartAnchor'), ForwardRef('TalonWord')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonCommand(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, rule: 'TalonRule', script: 'TalonBlock') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonComment(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonContext(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonAnd'), ForwardRef('TalonDocstring'), ForwardRef('TalonMatch'), ForwardRef('TalonNot'), ForwardRef('TalonOr')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonDocstring(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonEndAnchor(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, expression: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonFloat(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonImplicitString(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonIncludeTag(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, tag: 'TalonIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonInteger(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonInterpolation(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonKeyAction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, arguments: 'TalonImplicitString') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonList(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, list_name: 'TalonIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonMatch(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, key: 'TalonIdentifier', pattern: 'TalonImplicitString') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonNot(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'TalonMatch') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonNumber(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('TalonFloat'), ForwardRef('TalonInteger')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonOperator(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonOptional(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCapture'), ForwardRef('TalonChoice'), ForwardRef('TalonEndAnchor'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonSeq'), ForwardRef('TalonStartAnchor'), ForwardRef('TalonWord')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonOr(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonAnd'), ForwardRef('TalonMatch'), ForwardRef('TalonNot')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonParenthesizedExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('TalonAction'), ForwardRef('TalonBinaryOperator'), ForwardRef('TalonFloat'), ForwardRef('TalonInteger'), ForwardRef('TalonKeyAction'), ForwardRef('TalonParenthesizedExpression'), ForwardRef('TalonSleepAction'), ForwardRef('TalonString'), ForwardRef('TalonVariable')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonParenthesizedRule(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCapture'), ForwardRef('TalonChoice'), ForwardRef('TalonEndAnchor'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonSeq'), ForwardRef('TalonStartAnchor'), ForwardRef('TalonWord')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonRegexEscapeSequence(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Optional[ForwardRef('TalonRegexEscapeSequence')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonRepeat(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('TalonCapture'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonWord')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonRepeat1(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('TalonCapture'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonWord')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonRule(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCapture'), ForwardRef('TalonChoice'), ForwardRef('TalonEndAnchor'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonSeq'), ForwardRef('TalonStartAnchor'), ForwardRef('TalonWord')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonSeq(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCapture'), ForwardRef('TalonList'), ForwardRef('TalonOptional'), ForwardRef('TalonParenthesizedRule'), ForwardRef('TalonRepeat'), ForwardRef('TalonRepeat1'), ForwardRef('TalonWord')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonSettings(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'TalonBlock') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonSleepAction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, arguments: 'TalonImplicitString') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonSourceFile(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonCommand'), ForwardRef('TalonContext'), ForwardRef('TalonIncludeTag'), ForwardRef('TalonSettings')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonStartAnchor(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonString(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('TalonInterpolation'), ForwardRef('TalonStringContent'), ForwardRef('TalonStringEscapeSequence')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonStringContent(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonStringEscapeSequence(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonVariable(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, variable_name: 'TalonIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  TalonWord(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
