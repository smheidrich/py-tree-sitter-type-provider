input:
  name: javascript
  class_prefix: Js
output: |-
  from_tree_sitter(self, tsnode: tree_sitter.Node, encoding: str = 'utf-8') -> Union[list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]
  JsArguments(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsExpression'), ForwardRef('JsSpreadElement')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsArray(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsExpression'), ForwardRef('JsSpreadElement')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsArrayPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsAssignmentPattern'), ForwardRef('JsPattern')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsArrowFunction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: Union[ForwardRef('JsExpression'), ForwardRef('JsStatementBlock')], parameter: Optional[ForwardRef('JsIdentifier')], parameters: Optional[ForwardRef('JsFormalParameters')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsAssignmentExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsIdentifier'), ForwardRef('JsMemberExpression'), ForwardRef('JsObjectPattern'), ForwardRef('JsParenthesizedExpression'), ForwardRef('JsSubscriptExpression'), ForwardRef('JsUndefined')], right: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsAssignmentPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: 'JsPattern', right: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsAugmentedAssignmentExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: Union[ForwardRef('JsIdentifier'), ForwardRef('JsMemberExpression'), ForwardRef('JsParenthesizedExpression'), ForwardRef('JsSubscriptExpression')], right: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsAwaitExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsBinaryExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: 'JsExpression', right: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsBreakStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, label: Optional[ForwardRef('JsStatementIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsCallExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, arguments: Union[ForwardRef('JsArguments'), ForwardRef('JsTemplateString')], function: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsCatchClause(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', parameter: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsIdentifier'), ForwardRef('JsObjectPattern'), NoneType]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsClass(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsClassBody', decorator: list['JsDecorator'], name: Optional[ForwardRef('JsIdentifier')], children: Optional[ForwardRef('JsClassHeritage')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsClassBody(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, member: list[typing.Union[ForwardRef('JsFieldDefinition'), ForwardRef('JsMethodDefinition')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsClassDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsClassBody', decorator: list['JsDecorator'], name: 'JsIdentifier', children: Optional[ForwardRef('JsClassHeritage')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsClassHeritage(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsComment(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsComputedPropertyName(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsContinueStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, label: Optional[ForwardRef('JsStatementIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsDebuggerStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsDecorator(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsCallExpression'), ForwardRef('JsIdentifier'), ForwardRef('JsMemberExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsDoStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', condition: 'JsParenthesizedExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsElseClause(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsStatement') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsEmptyStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsEscapeSequence(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsExportClause(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsExportSpecifier']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsExportSpecifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, alias: Optional[ForwardRef('JsIdentifier')], name: 'JsIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsExportStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, declaration: Optional[ForwardRef('JsDeclaration')], decorator: list['JsDecorator'], source: Optional[ForwardRef('JsString')], value: Optional[ForwardRef('JsExpression')], children: Union[ForwardRef('JsExportClause'), ForwardRef('JsNamespaceExport'), NoneType]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsExpressionStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFalse(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFieldDefinition(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, decorator: list['JsDecorator'], property: Union[ForwardRef('JsComputedPropertyName'), ForwardRef('JsNumber'), ForwardRef('JsPrivatePropertyIdentifier'), ForwardRef('JsPropertyIdentifier'), ForwardRef('JsString')], value: Optional[ForwardRef('JsExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFinallyClause(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsForInStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', left: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsIdentifier'), ForwardRef('JsMemberExpression'), ForwardRef('JsObjectPattern'), ForwardRef('JsParenthesizedExpression'), ForwardRef('JsSubscriptExpression'), ForwardRef('JsUndefined')], right: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')], value: Optional[ForwardRef('JsExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsForStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', condition: Union[ForwardRef('JsEmptyStatement'), ForwardRef('JsExpressionStatement')], increment: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression'), NoneType], initializer: Union[ForwardRef('JsEmptyStatement'), ForwardRef('JsExpressionStatement'), ForwardRef('JsLexicalDeclaration'), ForwardRef('JsVariableDeclaration')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFormalParameters(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsAssignmentPattern'), ForwardRef('JsPattern')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFunction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', name: Optional[ForwardRef('JsIdentifier')], parameters: 'JsFormalParameters') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsFunctionDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', name: 'JsIdentifier', parameters: 'JsFormalParameters') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsGeneratorFunction(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', name: Optional[ForwardRef('JsIdentifier')], parameters: 'JsFormalParameters') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsGeneratorFunctionDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', name: 'JsIdentifier', parameters: 'JsFormalParameters') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsHashBangLine(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsIfStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, alternative: Optional[ForwardRef('JsElseClause')], condition: 'JsParenthesizedExpression', consequence: 'JsStatement') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsImport(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsImportClause(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsIdentifier'), ForwardRef('JsNamedImports'), ForwardRef('JsNamespaceImport')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsImportSpecifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, alias: Optional[ForwardRef('JsIdentifier')], name: 'JsIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsImportStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, source: 'JsString', children: Optional[ForwardRef('JsImportClause')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxAttribute(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsJsxElement'), ForwardRef('JsJsxExpression'), ForwardRef('JsJsxFragment'), ForwardRef('JsJsxNamespaceName'), ForwardRef('JsJsxSelfClosingElement'), ForwardRef('JsPropertyIdentifier'), ForwardRef('JsString')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxClosingElement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, name: Union[ForwardRef('JsIdentifier'), ForwardRef('JsJsxNamespaceName'), ForwardRef('JsNestedIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxElement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, close_tag: 'JsJsxClosingElement', open_tag: 'JsJsxOpeningElement', children: list[typing.Union[ForwardRef('JsJsxElement'), ForwardRef('JsJsxExpression'), ForwardRef('JsJsxFragment'), ForwardRef('JsJsxSelfClosingElement'), ForwardRef('JsJsxText')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression'), ForwardRef('JsSpreadElement'), NoneType]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxFragment(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsJsxElement'), ForwardRef('JsJsxExpression'), ForwardRef('JsJsxFragment'), ForwardRef('JsJsxSelfClosingElement'), ForwardRef('JsJsxText')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxNamespaceName(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsIdentifier']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxOpeningElement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, attribute: list[typing.Union[ForwardRef('JsJsxAttribute'), ForwardRef('JsJsxExpression')]], name: Union[ForwardRef('JsIdentifier'), ForwardRef('JsJsxNamespaceName'), ForwardRef('JsNestedIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxSelfClosingElement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, attribute: list[typing.Union[ForwardRef('JsJsxAttribute'), ForwardRef('JsJsxExpression')]], name: Union[ForwardRef('JsIdentifier'), ForwardRef('JsJsxNamespaceName'), ForwardRef('JsNestedIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsJsxText(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsLabeledStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', label: 'JsStatementIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsLexicalDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsVariableDeclarator']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsMemberExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, object: 'JsExpression', property: Union[ForwardRef('JsPrivatePropertyIdentifier'), ForwardRef('JsPropertyIdentifier')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsMetaProperty(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsMethodDefinition(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', decorator: list['JsDecorator'], name: Union[ForwardRef('JsComputedPropertyName'), ForwardRef('JsNumber'), ForwardRef('JsPrivatePropertyIdentifier'), ForwardRef('JsPropertyIdentifier'), ForwardRef('JsString')], parameters: 'JsFormalParameters') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNamedImports(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsImportSpecifier']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNamespaceExport(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNamespaceImport(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsIdentifier') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNestedIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsIdentifier'), ForwardRef('JsNestedIdentifier')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNewExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, arguments: Optional[ForwardRef('JsArguments')], constructor: Union[ForwardRef('JsNewExpression'), ForwardRef('JsPrimaryExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNull(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsNumber(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsObject(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsMethodDefinition'), ForwardRef('JsPair'), ForwardRef('JsShorthandPropertyIdentifier'), ForwardRef('JsSpreadElement')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsObjectAssignmentPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsObjectPattern'), ForwardRef('JsShorthandPropertyIdentifierPattern')], right: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsObjectPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsObjectAssignmentPattern'), ForwardRef('JsPairPattern'), ForwardRef('JsRestPattern'), ForwardRef('JsShorthandPropertyIdentifierPattern')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPair(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, key: Union[ForwardRef('JsComputedPropertyName'), ForwardRef('JsNumber'), ForwardRef('JsPrivatePropertyIdentifier'), ForwardRef('JsPropertyIdentifier'), ForwardRef('JsString')], value: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPairPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, key: Union[ForwardRef('JsComputedPropertyName'), ForwardRef('JsNumber'), ForwardRef('JsPrivatePropertyIdentifier'), ForwardRef('JsPropertyIdentifier'), ForwardRef('JsString')], value: Union[ForwardRef('JsAssignmentPattern'), ForwardRef('JsPattern')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsParenthesizedExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPrimaryExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPrivatePropertyIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsProgram(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsHashBangLine'), ForwardRef('JsStatement')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsPropertyIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsRegex(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, flags: Optional[ForwardRef('JsRegexFlags')], pattern: 'JsRegexPattern') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsRegexFlags(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsRegexPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsRestPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsIdentifier'), ForwardRef('JsMemberExpression'), ForwardRef('JsObjectPattern'), ForwardRef('JsSubscriptExpression'), ForwardRef('JsUndefined')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsReturnStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression'), NoneType]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSequenceExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, left: 'JsExpression', right: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsShorthandPropertyIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsShorthandPropertyIdentifierPattern(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSpreadElement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsStatementBlock(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsStatement']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsStatementIdentifier(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsString(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsEscapeSequence'), ForwardRef('JsStringFragment')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsStringFragment(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSubscriptExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, index: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')], object: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSuper(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSwitchBody(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsSwitchCase'), ForwardRef('JsSwitchDefault')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSwitchCase(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: list['JsStatement'], value: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSwitchDefault(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: list['JsStatement']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsSwitchStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsSwitchBody', value: 'JsParenthesizedExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsTemplateString(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list[typing.Union[ForwardRef('JsEscapeSequence'), ForwardRef('JsTemplateSubstitution')]]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsTemplateSubstitution(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsTernaryExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, alternative: 'JsExpression', condition: 'JsExpression', consequence: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsThis(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsThrowStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Union[ForwardRef('JsExpression'), ForwardRef('JsSequenceExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsTrue(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsTryStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatementBlock', finalizer: Optional[ForwardRef('JsFinallyClause')], handler: Optional[ForwardRef('JsCatchClause')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsUnaryExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, argument: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsUndefined(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsUpdateExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, argument: 'JsExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsVariableDeclaration(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: list['JsVariableDeclarator']) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsVariableDeclarator(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, name: Union[ForwardRef('JsArrayPattern'), ForwardRef('JsIdentifier'), ForwardRef('JsObjectPattern')], value: Optional[ForwardRef('JsExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsWhileStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', condition: 'JsParenthesizedExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsWithStatement(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, body: 'JsStatement', object: 'JsParenthesizedExpression') -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  JsYieldExpression(text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, children: Optional[ForwardRef('JsExpression')]) -> None
    to_dict(self, encode_json=False) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]
    to_json(self, *, skipkeys: bool = False, ensure_ascii: bool = True, check_circular: bool = True, allow_nan: bool = True, indent: Union[int, str, NoneType] = None, separators: Tuple[str, str] = None, default: Callable = None, sort_keys: bool = False, **kw) -> str
  NodeTransformer()
    transform(self, node: tree_sitter_type_provider.node_types.Node) -> ~Result
    transform_ERROR(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsArguments(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsArray(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsArrayPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsArrowFunction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsAssignmentExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsAssignmentPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsAugmentedAssignmentExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsAwaitExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsBinaryExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsBreakStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsCallExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsCatchClause(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsClass(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsClassBody(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsClassDeclaration(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsClassHeritage(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsComment(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsComputedPropertyName(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsContinueStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsDebuggerStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsDecorator(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsDoStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsElseClause(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsEmptyStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsEscapeSequence(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsExportClause(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsExportSpecifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsExportStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsExpressionStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFalse(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFieldDefinition(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFinallyClause(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsForInStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsForStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFormalParameters(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFunction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsFunctionDeclaration(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsGeneratorFunction(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsGeneratorFunctionDeclaration(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsHashBangLine(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsIfStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsImport(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsImportClause(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsImportSpecifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsImportStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxAttribute(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxClosingElement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxElement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxFragment(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxNamespaceName(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxOpeningElement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxSelfClosingElement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsJsxText(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsLabeledStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsLexicalDeclaration(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsMemberExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsMetaProperty(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsMethodDefinition(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNamedImports(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNamespaceExport(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNamespaceImport(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNestedIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNewExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNull(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsNumber(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsObject(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsObjectAssignmentPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsObjectPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsPair(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsPairPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsParenthesizedExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsPrivatePropertyIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsProgram(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsPropertyIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsRegex(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsRegexFlags(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsRegexPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsRestPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsReturnStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSequenceExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsShorthandPropertyIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsShorthandPropertyIdentifierPattern(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSpreadElement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsStatementBlock(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsStatementIdentifier(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsString(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsStringFragment(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSubscriptExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSuper(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSwitchBody(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSwitchCase(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSwitchDefault(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsSwitchStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsTemplateString(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsTemplateSubstitution(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsTernaryExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsThis(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsThrowStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsTrue(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsTryStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsUnaryExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsUndefined(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsUpdateExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsVariableDeclaration(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsVariableDeclarator(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsWhileStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsWithStatement(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
    transform_JsYieldExpression(self, *, text: str, type_name: str, start_position: tree_sitter_type_provider.node_types.Point, end_position: tree_sitter_type_provider.node_types.Point, **kwargs: dict[str, typing.Union[~Result, list[tree_sitter_type_provider.node_types.Node], tree_sitter_type_provider.node_types.Node, NoneType]]) -> ~Result
  NodeVisitor()
    generic_visit(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_ERROR(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsArguments(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsArray(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsArrayPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsArrowFunction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsAssignmentExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsAssignmentPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsAugmentedAssignmentExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsAwaitExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsBinaryExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsBreakStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsCallExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsCatchClause(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsClass(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsClassBody(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsClassDeclaration(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsClassHeritage(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsComment(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsComputedPropertyName(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsContinueStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsDebuggerStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsDecorator(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsDoStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsElseClause(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsEmptyStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsEscapeSequence(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsExportClause(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsExportSpecifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsExportStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsExpressionStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFalse(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFieldDefinition(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFinallyClause(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsForInStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsForStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFormalParameters(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFunction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsFunctionDeclaration(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsGeneratorFunction(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsGeneratorFunctionDeclaration(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsHashBangLine(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsIfStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsImport(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsImportClause(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsImportSpecifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsImportStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxAttribute(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxClosingElement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxElement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxFragment(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxNamespaceName(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxOpeningElement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxSelfClosingElement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsJsxText(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsLabeledStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsLexicalDeclaration(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsMemberExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsMetaProperty(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsMethodDefinition(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNamedImports(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNamespaceExport(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNamespaceImport(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNestedIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNewExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNull(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsNumber(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsObject(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsObjectAssignmentPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsObjectPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsPair(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsPairPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsParenthesizedExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsPrivatePropertyIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsProgram(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsPropertyIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsRegex(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsRegexFlags(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsRegexPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsRestPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsReturnStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSequenceExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsShorthandPropertyIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsShorthandPropertyIdentifierPattern(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSpreadElement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsStatementBlock(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsStatementIdentifier(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsString(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsStringFragment(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSubscriptExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSuper(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSwitchBody(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSwitchCase(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSwitchDefault(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsSwitchStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsTemplateString(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsTemplateSubstitution(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsTernaryExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsThis(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsThrowStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsTrue(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsTryStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsUnaryExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsUndefined(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsUpdateExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsVariableDeclaration(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsVariableDeclarator(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsWhileStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsWithStatement(self, node: tree_sitter_type_provider.node_types.Node) -> None
    visit_JsYieldExpression(self, node: tree_sitter_type_provider.node_types.Node) -> None
