input:
  name: javascript
  file: data/node-types/javascript.json
  class_prefix: Js
  extra: []
  error_as_node: false
output: |-
  from_tree_sitter(self, tsvalue: Union[tree_sitter.Tree, tree_sitter.Node, tree_sitter.TreeCursor], *, encoding: str = 'utf-8') -> Node
  JsArguments(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsExpression, JsSpreadElement]]) -> None
  JsArray(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsExpression, JsSpreadElement]]) -> None
  JsArrayPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsAssignmentPattern, JsPattern]]) -> None
  JsArrowFunction(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: Union[JsExpression, JsStatementBlock], parameter: Optional[JsIdentifier], parameters: Optional[JsFormalParameters]) -> None
  JsAssignmentExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: Union[JsArrayPattern, JsIdentifier, JsMemberExpression, JsObjectPattern, JsParenthesizedExpression, JsSubscriptExpression, JsUndefined], right: 'JsExpression') -> None
  JsAssignmentPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: 'JsPattern', right: 'JsExpression') -> None
  JsAugmentedAssignmentExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: Union[JsIdentifier, JsMemberExpression, JsParenthesizedExpression, JsSubscriptExpression], right: 'JsExpression') -> None
  JsAwaitExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsExpression') -> None
  JsBinaryExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: 'JsExpression', right: 'JsExpression') -> None
  JsBreakStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, label: Optional[JsStatementIdentifier]) -> None
  JsCallExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, arguments: Union[JsArguments, JsTemplateString], function: 'JsExpression') -> None
  JsCatchClause(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', parameter: Union[JsArrayPattern, JsIdentifier, JsObjectPattern, None]) -> None
  JsClass(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[JsClassHeritage], body: 'JsClassBody', decorator: list['JsDecorator'], name: Optional[JsIdentifier]) -> None
  JsClassBody(text: str, type_name: str, start_position: Point, end_position: Point, children: None, member: list[Union[JsFieldDefinition, JsMethodDefinition]]) -> None
  JsClassDeclaration(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[JsClassHeritage], body: 'JsClassBody', decorator: list['JsDecorator'], name: 'JsIdentifier') -> None
  JsClassHeritage(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsExpression') -> None
  JsComment(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsComputedPropertyName(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsExpression') -> None
  JsContinueStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, label: Optional[JsStatementIdentifier]) -> None
  JsDebuggerStatement(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsDeclaration(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsDecorator(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsCallExpression, JsIdentifier, JsMemberExpression]) -> None
  JsDoStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', condition: 'JsParenthesizedExpression') -> None
  JsElseClause(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsStatement') -> None
  JsEmptyStatement(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsEscapeSequence(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsExportClause(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsExportSpecifier']) -> None
  JsExportSpecifier(text: str, type_name: str, start_position: Point, end_position: Point, children: None, alias: Optional[JsIdentifier], name: 'JsIdentifier') -> None
  JsExportStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExportClause, JsNamespaceExport, None], declaration: Optional[JsDeclaration], decorator: list['JsDecorator'], source: Optional[JsString], value: Optional[JsExpression]) -> None
  JsExpression(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsExpressionStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression]) -> None
  JsFalse(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsFieldDefinition(text: str, type_name: str, start_position: Point, end_position: Point, children: None, decorator: list['JsDecorator'], property: Union[JsComputedPropertyName, JsNumber, JsPrivatePropertyIdentifier, JsPropertyIdentifier, JsString], value: Optional[JsExpression]) -> None
  JsFinallyClause(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock') -> None
  JsForInStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', left: Union[JsArrayPattern, JsIdentifier, JsMemberExpression, JsObjectPattern, JsParenthesizedExpression, JsSubscriptExpression, JsUndefined], right: Union[JsExpression, JsSequenceExpression], value: Optional[JsExpression]) -> None
  JsForStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', condition: Union[JsEmptyStatement, JsExpressionStatement], increment: Union[JsExpression, JsSequenceExpression, None], initializer: Union[JsEmptyStatement, JsExpressionStatement, JsLexicalDeclaration, JsVariableDeclaration]) -> None
  JsFormalParameters(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsAssignmentPattern, JsPattern]]) -> None
  JsFunction(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', name: Optional[JsIdentifier], parameters: 'JsFormalParameters') -> None
  JsFunctionDeclaration(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', name: 'JsIdentifier', parameters: 'JsFormalParameters') -> None
  JsGeneratorFunction(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', name: Optional[JsIdentifier], parameters: 'JsFormalParameters') -> None
  JsGeneratorFunctionDeclaration(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', name: 'JsIdentifier', parameters: 'JsFormalParameters') -> None
  JsHashBangLine(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsIdentifier(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsIfStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, alternative: Optional[JsElseClause], condition: 'JsParenthesizedExpression', consequence: 'JsStatement') -> None
  JsImport(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsImportClause(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsIdentifier, JsNamedImports, JsNamespaceImport]]) -> None
  JsImportSpecifier(text: str, type_name: str, start_position: Point, end_position: Point, children: None, alias: Optional[JsIdentifier], name: 'JsIdentifier') -> None
  JsImportStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[JsImportClause], source: 'JsString') -> None
  JsJsxAttribute(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsJsxElement, JsJsxExpression, JsJsxFragment, JsJsxNamespaceName, JsJsxSelfClosingElement, JsPropertyIdentifier, JsString]]) -> None
  JsJsxClosingElement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, name: Union[JsIdentifier, JsJsxNamespaceName, JsNestedIdentifier]) -> None
  JsJsxElement(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsJsxElement, JsJsxExpression, JsJsxFragment, JsJsxSelfClosingElement, JsJsxText]], close_tag: 'JsJsxClosingElement', open_tag: 'JsJsxOpeningElement') -> None
  JsJsxExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression, JsSpreadElement, None]) -> None
  JsJsxFragment(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsJsxElement, JsJsxExpression, JsJsxFragment, JsJsxSelfClosingElement, JsJsxText]]) -> None
  JsJsxNamespaceName(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsIdentifier']) -> None
  JsJsxOpeningElement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, attribute: list[Union[JsJsxAttribute, JsJsxExpression]], name: Union[JsIdentifier, JsJsxNamespaceName, JsNestedIdentifier]) -> None
  JsJsxSelfClosingElement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, attribute: list[Union[JsJsxAttribute, JsJsxExpression]], name: Union[JsIdentifier, JsJsxNamespaceName, JsNestedIdentifier]) -> None
  JsJsxText(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsLabeledStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', label: 'JsStatementIdentifier') -> None
  JsLexicalDeclaration(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsVariableDeclarator']) -> None
  JsMemberExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, object: 'JsExpression', property: Union[JsPrivatePropertyIdentifier, JsPropertyIdentifier]) -> None
  JsMetaProperty(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsMethodDefinition(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', decorator: list['JsDecorator'], name: Union[JsComputedPropertyName, JsNumber, JsPrivatePropertyIdentifier, JsPropertyIdentifier, JsString], parameters: 'JsFormalParameters') -> None
  JsNamedImports(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsImportSpecifier']) -> None
  JsNamespaceExport(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsIdentifier') -> None
  JsNamespaceImport(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsIdentifier') -> None
  JsNestedIdentifier(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsIdentifier, JsNestedIdentifier]]) -> None
  JsNewExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, arguments: Optional[JsArguments], constructor: Union[JsNewExpression, JsPrimaryExpression]) -> None
  JsNull(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsNumber(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsObject(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsMethodDefinition, JsPair, JsShorthandPropertyIdentifier, JsSpreadElement]]) -> None
  JsObjectAssignmentPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: Union[JsArrayPattern, JsObjectPattern, JsShorthandPropertyIdentifierPattern], right: 'JsExpression') -> None
  JsObjectPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsObjectAssignmentPattern, JsPairPattern, JsRestPattern, JsShorthandPropertyIdentifierPattern]]) -> None
  JsPair(text: str, type_name: str, start_position: Point, end_position: Point, children: None, key: Union[JsComputedPropertyName, JsNumber, JsPrivatePropertyIdentifier, JsPropertyIdentifier, JsString], value: 'JsExpression') -> None
  JsPairPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: None, key: Union[JsComputedPropertyName, JsNumber, JsPrivatePropertyIdentifier, JsPropertyIdentifier, JsString], value: Union[JsAssignmentPattern, JsPattern]) -> None
  JsParenthesizedExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression]) -> None
  JsPattern(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsPrimaryExpression(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsPrivatePropertyIdentifier(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsProgram(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsHashBangLine, JsStatement]]) -> None
  JsPropertyIdentifier(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsRegex(text: str, type_name: str, start_position: Point, end_position: Point, children: None, flags: Optional[JsRegexFlags], pattern: 'JsRegexPattern') -> None
  JsRegexFlags(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsRegexPattern(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsRestPattern(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsArrayPattern, JsIdentifier, JsMemberExpression, JsObjectPattern, JsSubscriptExpression, JsUndefined]) -> None
  JsReturnStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression, None]) -> None
  JsSequenceExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, left: 'JsExpression', right: Union[JsExpression, JsSequenceExpression]) -> None
  JsShorthandPropertyIdentifier(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsShorthandPropertyIdentifierPattern(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsSpreadElement(text: str, type_name: str, start_position: Point, end_position: Point, children: 'JsExpression') -> None
  JsStatement(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsStatementBlock(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsStatement']) -> None
  JsStatementIdentifier(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsString(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsEscapeSequence, JsStringFragment]]) -> None
  JsStringFragment(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsSubscriptExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, index: Union[JsExpression, JsSequenceExpression], object: 'JsExpression') -> None
  JsSuper(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsSwitchBody(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsSwitchCase, JsSwitchDefault]]) -> None
  JsSwitchCase(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: list['JsStatement'], value: Union[JsExpression, JsSequenceExpression]) -> None
  JsSwitchDefault(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: list['JsStatement']) -> None
  JsSwitchStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsSwitchBody', value: 'JsParenthesizedExpression') -> None
  JsTemplateString(text: str, type_name: str, start_position: Point, end_position: Point, children: list[Union[JsEscapeSequence, JsTemplateSubstitution]]) -> None
  JsTemplateSubstitution(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression]) -> None
  JsTernaryExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, alternative: 'JsExpression', condition: 'JsExpression', consequence: 'JsExpression') -> None
  JsThis(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsThrowStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[JsExpression, JsSequenceExpression]) -> None
  JsTrue(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsTryStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatementBlock', finalizer: Optional[JsFinallyClause], handler: Optional[JsCatchClause]) -> None
  JsUnaryExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, argument: 'JsExpression') -> None
  JsUndefined(text: str, type_name: str, start_position: Point, end_position: Point) -> None
  JsUpdateExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: None, argument: 'JsExpression') -> None
  JsVariableDeclaration(text: str, type_name: str, start_position: Point, end_position: Point, children: list['JsVariableDeclarator']) -> None
  JsVariableDeclarator(text: str, type_name: str, start_position: Point, end_position: Point, children: None, name: Union[JsArrayPattern, JsIdentifier, JsObjectPattern], value: Optional[JsExpression]) -> None
  JsWhileStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', condition: 'JsParenthesizedExpression') -> None
  JsWithStatement(text: str, type_name: str, start_position: Point, end_position: Point, children: None, body: 'JsStatement', object: 'JsParenthesizedExpression') -> None
  JsYieldExpression(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[JsExpression]) -> None
